[{"/Users/Tatsuki/projects/react/free_market_front/src/index.tsx":"1","/Users/Tatsuki/projects/react/free_market_front/src/serviceWorker.ts":"2","/Users/Tatsuki/projects/react/free_market_front/src/app/store.ts":"3","/Users/Tatsuki/projects/react/free_market_front/src/App.tsx":"4","/Users/Tatsuki/projects/react/free_market_front/src/features/counter/counterSlice.ts":"5","/Users/Tatsuki/projects/react/free_market_front/src/features/counter/Counter.tsx":"6","/Users/Tatsuki/projects/react/free_market_front/src/features/user/authSlice.ts":"7","/Users/Tatsuki/projects/react/free_market_front/src/features/core/Core.tsx":"8","/Users/Tatsuki/projects/react/free_market_front/src/features/user/SignIn.tsx":"9","/Users/Tatsuki/projects/react/free_market_front/src/features/user/SignUp.tsx":"10","/Users/Tatsuki/projects/react/free_market_front/src/features/post/postSlice.ts":"11","/Users/Tatsuki/projects/react/free_market_front/src/features/post/Post.tsx":"12","/Users/Tatsuki/projects/react/free_market_front/src/features/core/EditProfile.tsx":"13","/Users/Tatsuki/projects/react/free_market_front/src/features/core/NewPost.tsx":"14"},{"size":648,"mtime":1612234867354,"results":"15","hashOfConfig":"16"},{"size":5424,"mtime":1612234867355,"results":"17","hashOfConfig":"16"},{"size":828,"mtime":1614171656600,"results":"18","hashOfConfig":"16"},{"size":209,"mtime":1612516099820,"results":"19","hashOfConfig":"16"},{"size":1851,"mtime":1612234867353,"results":"20","hashOfConfig":"16"},{"size":1626,"mtime":1612234867352,"results":"21","hashOfConfig":"16"},{"size":5681,"mtime":1614678250731,"results":"22","hashOfConfig":"16"},{"size":5228,"mtime":1614770047560,"results":"23","hashOfConfig":"16"},{"size":4942,"mtime":1614660959306,"results":"24","hashOfConfig":"16"},{"size":4732,"mtime":1614318918276,"results":"25","hashOfConfig":"16"},{"size":3912,"mtime":1614751217198,"results":"26","hashOfConfig":"16"},{"size":4871,"mtime":1614770500679,"results":"27","hashOfConfig":"16"},{"size":3213,"mtime":1614767124212,"results":"28","hashOfConfig":"16"},{"size":2512,"mtime":1614751798798,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"hb3b4k",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Tatsuki/projects/react/free_market_front/src/index.tsx",[],["61","62"],"/Users/Tatsuki/projects/react/free_market_front/src/serviceWorker.ts",[],"/Users/Tatsuki/projects/react/free_market_front/src/app/store.ts",[],"/Users/Tatsuki/projects/react/free_market_front/src/App.tsx",[],"/Users/Tatsuki/projects/react/free_market_front/src/features/counter/counterSlice.ts",[],"/Users/Tatsuki/projects/react/free_market_front/src/features/counter/Counter.tsx",[],"/Users/Tatsuki/projects/react/free_market_front/src/features/user/authSlice.ts",[],"/Users/Tatsuki/projects/react/free_market_front/src/features/core/Core.tsx",["63","64"],"/Users/Tatsuki/projects/react/free_market_front/src/features/user/SignIn.tsx",["65","66"],"import React from \"react\";\nimport Modal from \"react-modal\";\nimport { Formik } from \"formik\";\nimport {\n  selectOpenSignIn,\n  fetchCredStart,\n  fetchCredEnd,\n  fetchAsyncLogin,\n  resetOpenSignIn,\n  resetOpenSignUp,\n  fetchAsyncGetMyProf,\n  setOpenSignUp,\n  selectIsLoadingAuth,\n} from \"./authSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button, TextField, CircularProgress } from \"@material-ui/core\";\nimport { AppDispatch } from \"../../app/store\";\nimport authStyle from \"./Auth.module.css\";\n// バリデーションのためのライブラリ\nimport * as Yup from \"yup\";\n\nconst customStyles = {\n  overlay: {\n    backgroundColor: \"#777777\",\n  },\n  content: {\n    top: \"55%\",\n    left: \"50%\",\n\n    width: 280,\n    height: 350,\n    padding: \"50px\",\n\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\nconst SignIn: React.FC = () => {\n  // Modalのステート（初期値はfalse)\n  const openSignIn = useSelector(selectOpenSignIn);\n  const dispatch: AppDispatch = useDispatch();\n  // フロントエンド側のURL\n  const frontUrl = process.env.REACT_FRONT_DEV_API_URL;\n  const isLoadingAuth = useSelector(selectIsLoadingAuth);\n  return (\n    <>\n      <Modal\n        isOpen={openSignIn}\n        onRequestClose={async () => {\n          await dispatch(resetOpenSignIn());\n        }}\n        style={customStyles}\n      >\n        <h1 className={authStyle.modalTitle}>Free Market</h1>\n        <Formik\n          initialErrors={{ email: \"required\" }}\n          initialValues={{ email: \"\", password: \"\" }}\n          onSubmit={async (values) => {\n            await dispatch(fetchCredStart());\n            const result = await dispatch(fetchAsyncLogin(values));\n            console.log(\"hhhh\");\n            if (fetchAsyncLogin.fulfilled.match(result)) {\n              await dispatch(fetchAsyncGetMyProf());\n            }\n            await dispatch(fetchCredEnd());\n            await dispatch(resetOpenSignIn());\n          }}\n          validationSchema={Yup.object().shape({\n            email: Yup.string()\n              .email(\"email format is wrong\")\n              .required(\"email is must\"),\n            password: Yup.string().required(\"password is must\").min(4),\n          })}\n          render={({\n            handleSubmit,\n            handleChange,\n            handleBlur, // handler for onBlur event of form elements\n            values,\n            touched,\n            errors,\n            isValid,\n          }) => (\n            <>\n              <form onSubmit={handleSubmit}>\n                <div className={authStyle.auth_progress}>\n                  {isLoadingAuth && <CircularProgress />}\n                </div>\n                <div>\n                  <label>email</label>\n                  <br />\n                  <TextField\n                    className={authStyle.form}\n                    placeholder=\"email\"\n                    type=\"text\"\n                    name=\"email\"\n                    onBlur={handleBlur}\n                    value={values.email}\n                    onChange={handleChange}\n                  />\n                </div>\n                <br />\n                {touched.email && errors.email ? (\n                  <div className={authStyle.validateFont}>{errors.email}</div>\n                ) : null}\n                <div>\n                  <label>password</label>\n                  <br />\n                  <TextField\n                    className={authStyle.form}\n                    placeholder=\"password\"\n                    type=\"password\"\n                    name=\"password\"\n                    onBlur={handleBlur}\n                    value={values.password}\n                    onChange={handleChange}\n                  />\n                </div>\n                <br />\n                {touched.password && errors.password ? (\n                  <div className={authStyle.validateFont}>\n                    {errors.password}\n                  </div>\n                ) : null}\n                <br />\n                <Button\n                  className={authStyle.form}\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"default\"\n                  disabled={!isValid}\n                >\n                  Login\n                </Button>\n              </form>\n            </>\n          )}\n        />\n\n        {/* <br />\n        <Button\n          className={authStyle.form}\n          variant=\"contained\"\n          color=\"default\"\n          onClick={async () => {\n            await dispatch(resetOpenSignIn());\n          }}\n        >\n          Close\n        </Button> */}\n\n        <br />\n        <br />\n        <div className={authStyle.auth_text}>\n          <span\n            onClick={async () => {\n              await dispatch(setOpenSignUp());\n              await dispatch(resetOpenSignIn());\n            }}\n          >\n            You don't have an account ?\n          </span>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default SignIn;\n","/Users/Tatsuki/projects/react/free_market_front/src/features/user/SignUp.tsx",["67","68","69","70"],"import React from \"react\";\nimport {\n  setOpenSignIn,\n  selectOpenSignIn,\n  resetOpenSignIn,\n  resetOpenSignUp,\n  selectOpenSignUp,\n  fetchCredStart,\n  fetchCredEnd,\n  fetchAsyncGetMyProf,\n  setOpenSignUp,\n  fetchAsyncLogin,\n  fetchAsyncRegister,\n  selectIsLoadingAuth,\n  fetchAsyncCreateProf,\n} from \"./authSlice\";\nimport Modal from \"react-modal\";\nimport { Formik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button, TextField, CircularProgress } from \"@material-ui/core\";\nimport { AppDispatch } from \"../../app/store\";\nimport authStyle from \"./Auth.module.css\";\n// バリデーションのためのライブラリ\nimport * as Yup from \"yup\";\n\nconst customStyles = {\n  overlay: {\n    backgroundColor: \"#777777\",\n  },\n  content: {\n    top: \"55%\",\n    left: \"50%\",\n\n    width: 280,\n    height: 350,\n    padding: \"50px\",\n\n    transform: \"translate(-50%, -50%)\",\n  },\n};\nconst SignUp: React.FC = () => {\n  // Modalのステート（初期値はfalse)\n  const openSignUp = useSelector(selectOpenSignUp);\n  const dispatch: AppDispatch = useDispatch();\n  // フロントエンド側のURL\n  const frontUrl = process.env.REACT_FRONT_DEV_API_URL;\n  const isLoadingAuth = useSelector(selectIsLoadingAuth);\n  return (\n    <>\n      <Modal\n        isOpen={openSignUp}\n        style={customStyles}\n        onRequestClose={async () => {\n          await dispatch(resetOpenSignUp());\n        }}\n      >\n        <h1 className={authStyle.modalTitle}>Free Market</h1>\n        <Formik\n          initialErrors={{ email: \"required\" }}\n          initialValues={{ email: \"\", password: \"\" }}\n          onSubmit={async (values) => {\n            await dispatch(fetchCredStart());\n            const resultReg = await dispatch(fetchAsyncRegister(values));\n            if (fetchAsyncRegister.fulfilled.match(resultReg)) {\n              await dispatch(fetchAsyncLogin(values));\n              await dispatch(fetchAsyncCreateProf({ nickName: \"anonymous\" }));\n              await dispatch(fetchAsyncGetMyProf());\n            }\n            await dispatch(fetchCredEnd());\n            await dispatch(resetOpenSignUp());\n          }}\n          validationSchema={Yup.object().shape({\n            email: Yup.string()\n              .email(\"email format is wrong\")\n              .required(\"email is must\"),\n            password: Yup.string().required(\"password is must\").min(4),\n          })}\n          render={({\n            handleSubmit,\n            handleChange,\n            handleBlur, // handler for onBlur event of form elements\n            values,\n            touched,\n            errors,\n            isValid,\n          }) => (\n            <form onSubmit={handleSubmit}>\n              <div className={authStyle.auth_progress}>\n                {isLoadingAuth && <CircularProgress />}\n              </div>\n              <div>\n                <label>email</label>\n                <br />\n                <TextField\n                  className={authStyle.form}\n                  placeholder=\"email\"\n                  type=\"text\"\n                  name=\"email\"\n                  onBlur={handleBlur}\n                  value={values.email}\n                  onChange={handleChange}\n                />\n              </div>\n              <br />\n              {touched.email && errors.email ? (\n                <div className={authStyle.validateFont}>{errors.email}</div>\n              ) : null}\n              <div>\n                <label>password</label>\n                <br />\n                <TextField\n                  className={authStyle.form}\n                  placeholder=\"password\"\n                  type=\"password\"\n                  name=\"password\"\n                  onBlur={handleBlur}\n                  value={values.password}\n                  onChange={handleChange}\n                />\n              </div>\n              <br />\n              {touched.password && errors.password ? (\n                <div className={authStyle.validateFont}>{errors.password}</div>\n              ) : null}\n              <br />\n              <Button\n                className={authStyle.form}\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"default\"\n                disabled={!isValid}\n              >\n                Register\n              </Button>\n            </form>\n          )}\n        />\n\n        <br />\n        <div className={authStyle.auth_text}>\n          <span\n            className={authStyle.auth_text}\n            onClick={async () => {\n              await dispatch(setOpenSignIn());\n              await dispatch(resetOpenSignUp());\n            }}\n          >\n            You already have an account ?\n          </span>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default SignUp;\n","/Users/Tatsuki/projects/react/free_market_front/src/features/post/postSlice.ts",["71","72","73","74"],"/Users/Tatsuki/projects/react/free_market_front/src/features/post/Post.tsx",["75","76"],"/Users/Tatsuki/projects/react/free_market_front/src/features/core/EditProfile.tsx",[],"/Users/Tatsuki/projects/react/free_market_front/src/features/core/NewPost.tsx",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":19,"column":10,"nodeType":"83","messageId":"84","endLine":19,"endColumn":23},{"ruleId":"81","severity":1,"message":"85","line":36,"column":3,"nodeType":"83","messageId":"84","endLine":36,"endColumn":19},{"ruleId":"81","severity":1,"message":"86","line":10,"column":3,"nodeType":"83","messageId":"84","endLine":10,"endColumn":18},{"ruleId":"81","severity":1,"message":"87","line":43,"column":9,"nodeType":"83","messageId":"84","endLine":43,"endColumn":17},{"ruleId":"81","severity":1,"message":"88","line":4,"column":3,"nodeType":"83","messageId":"84","endLine":4,"endColumn":19},{"ruleId":"81","severity":1,"message":"89","line":5,"column":3,"nodeType":"83","messageId":"84","endLine":5,"endColumn":18},{"ruleId":"81","severity":1,"message":"90","line":11,"column":3,"nodeType":"83","messageId":"84","endLine":11,"endColumn":16},{"ruleId":"81","severity":1,"message":"87","line":46,"column":9,"nodeType":"83","messageId":"84","endLine":46,"endColumn":17},{"ruleId":"81","severity":1,"message":"91","line":5,"column":10,"nodeType":"83","messageId":"84","endLine":5,"endColumn":21},{"ruleId":"81","severity":1,"message":"92","line":6,"column":10,"nodeType":"83","messageId":"84","endLine":6,"endColumn":21},{"ruleId":"81","severity":1,"message":"93","line":6,"column":23,"nodeType":"83","messageId":"84","endLine":6,"endColumn":34},{"ruleId":"81","severity":1,"message":"94","line":8,"column":10,"nodeType":"83","messageId":"84","endLine":8,"endColumn":23},{"ruleId":"81","severity":1,"message":"95","line":3,"column":10,"nodeType":"83","messageId":"84","endLine":3,"endColumn":20},{"ruleId":"81","severity":1,"message":"86","line":15,"column":3,"nodeType":"83","messageId":"84","endLine":15,"endColumn":18},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"@typescript-eslint/no-unused-vars","'PROPS_PROFILE' is defined but never used.","Identifier","unusedVar","'CircularProgress' is defined but never used.","'resetOpenSignUp' is defined but never used.","'frontUrl' is assigned a value but never used.","'selectOpenSignIn' is defined but never used.","'resetOpenSignIn' is defined but never used.","'setOpenSignUp' is defined but never used.","'AppDispatch' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'setOpenSignIn' is defined but never used.","'makeStyles' is defined but never used.","no-global-assign","no-unsafe-negation"]